datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Modelos de domínio sem auditoria embutida
model Property {
  id          Int     @id @default(autoincrement())
  title       String
  locationMin String
  price       Float
  rating      Float
  reviewsQtd  Int
  guests      Int
  bedrooms    Int
  bathrooms   Int
  description String
  featured    Boolean @default(false)
  image       String  @default("https://placehold.co/600x400?text=No+Image&font=roboto")
  // URL da imagem principal

  host         Host          @relation(fields: [hostId], references: [id])
  hostId       Int
  location     Location      @relation(fields: [locationId], references: [id])
  locationId   Int           @unique
  amenities    Amenity[]     @relation("PropertyAmenities")
  rules        Rule[]
  reviews      Review[]
  photos       Photo[]
  nearbyPlaces NearbyPlace[]
}

model Photo {
  id         Int      @id @default(autoincrement())
  url        String // Link da foto
  caption    String?
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model Amenity {
  id         Int        @id @default(autoincrement())
  name       String
  icon       String // Nome ou caminho do ícone
  properties Property[] @relation("PropertyAmenities")
}

model Host {
  id           Int        @id @default(autoincrement())
  name         String
  avatar       String
  responseTime String
  phone        String
  languages    String[]
  properties   Property[]
}

model Location {
  id       Int       @id @default(autoincrement())
  address  String
  lat      Float
  lng      Float
  property Property?
}

model NearbyPlace {
  id         Int      @id @default(autoincrement())
  name       String
  distance   String
  type       String
  property   Property @relation(fields: [locationId], references: [id])
  locationId Int
}

model Rule {
  id         Int      @id @default(autoincrement())
  text       String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model Review {
  id         Int      @id @default(autoincrement())
  user       String // Nome do usuário para guest reviews
  avatar     String
  rating     Float
  date       String
  comment    String
  reviewer   User?    @relation("UserReviews", fields: [reviewerId], references: [id])
  reviewerId Int?
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}

/// Usuários e autenticação
model User {
  id            Int        @id @default(autoincrement())
  name          String
  email         String     @unique
  emailVerified DateTime?
  password      String
  avatar        String?
  role          Role       @default(USER)
  sessions      Session[]
  accounts      Account[]
  reviews       Review[]   @relation("UserReviews")
  auditLogs     AuditLog[]
}

enum Role {
  USER
  HOST
  ADMIN
}

/// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  expires_at         Int?    @map("expires_at")
  token_type         String? @map("token_type")
  scope              String?
  id_token           String? @map("id_token")
  session_state      String? @map("session_state")
  oauth_token_secret String? @map("oauth_token_secret")
  oauth_token        String? @map("oauth_token")
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// Modelo centralizado de auditoria
model AuditLog {
  id        Int         @id @default(autoincrement())
  model     String // Nome do modelo auditado (ex: "Property")
  recordId  Int // ID do registro afetado
  action    AuditAction // CREATE, UPDATE, DELETE
  userId    Int? // Usuário que realizou a ação
  user      User?       @relation(fields: [userId], references: [id])
  changes   Json // Payload com dados alterados ou snapshot
  timestamp DateTime    @default(now())
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}
